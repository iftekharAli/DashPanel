@model DashPanel.Models.ServiceRanking

@{
    ViewBag.Title = "OperatoreWiseClosingBase";
}

<h2>OperatoreWiseClosingBase</h2>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
<div ng-app="myApp" ng-controller="cntrl">

<div class="form-horizontal">
    <h4>Operator Wise Closing Base</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">


        <div class="form-group">
            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="date" ng-model="FromDate" class="form-control" />
                @*@Html.EditorFor(model => model.FromDate, new {htmlAttributes = new {@class = "form-control", ng_model = "FromDate"}})*@
                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="date" ng-model="EndDate" id="qq" class="form-control" />
                @*@Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control", ng_model = "EndDate" } })*@
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Search" class="btn btn-default" ng-click="sub()" />
            </div>
        </div>
    </div>




</div>
<div ng-show="ss">
    <div class="text-center">
                
        <i class="fa fa-refresh fa-spin fa-3x fa-fw" style="font-size: 98px"></i>
    </div>
</div>
<div ng-show="All">
<div class="row">
    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
        <h2 class="text-center" style="background-color: black; color: white">GameClub Closing (%)</h2>

    </div>

    <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
        <br />
        <br />
        <br />
        <table class="table table-bordered">

            <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">operator</th>
                <th scope="col">Closing Base</th>
                <th scope="col">Percantage</th>

            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="x in gcList">
                <td>{{x.SL}} </td>
                <td>{{x.Operator}}</td>
                <td>{{x.ClosingBase}}</td>
                <td>{{x.percentage}}%</td>

            </tr>
            </tbody>
        </table>


    </div>

    <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="gcChart">


    </div>

</div>
    
<div class="row">
        <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
            <h2 class="text-center" style="background-color: black; color: white">Buddy Closing (%)</h2>

        </div>

        <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
            <br />
            <br />
            <br />
            <table class="table table-bordered">

                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">operator</th>
                    <th scope="col">Closing Base</th>
                    <th scope="col">Percantage</th>

                </tr>
                </thead>
                <tbody>
                <tr ng-repeat="x in buddyList">
                    <td>{{x.SL}} </td>
                    <td>{{x.Operator}}</td>
                    <td>{{x.ClosingBase}}</td>
                    <td>{{x.percentage}}%</td>

                </tr>
                </tbody>
            </table>


        </div>

        <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="churnchart">


        </div>

    </div>
    
    
<div class="row">
        <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
            <h2 class="text-center" style="background-color: black; color: white">ClubZ Closing (%)</h2>

        </div>

        <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
            <br />
            <br />
            <br />
            <table class="table table-bordered">

                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">operator</th>
                    <th scope="col">Closing Base</th>
                    <th scope="col">Percantage</th>

                </tr>
                </thead>
                <tbody>
                <tr ng-repeat="x in clubzList">
                    <td>{{x.SL}} </td>
                    <td>{{x.Operator}}</td>
                    <td>{{x.ClosingBase}}</td>
                    <td>{{x.percentage}}%</td>

                </tr>
                </tbody>
            </table>


        </div>

        <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="clubzchart">


        </div>

    </div>
    
    
    
<div class="row">
        <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
            <h2 class="text-center" style="background-color: black; color: white">Buddy App Closing (%)</h2>

        </div>

        <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
            <br />
            <br />
            <br />
            <table class="table table-bordered">

                <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">operator</th>
                    <th scope="col">Closing Base</th>
                    <th scope="col">Percantage</th>

                </tr>
                </thead>
                <tbody>
                <tr ng-repeat="x in buddyAppList">
                    <td>{{x.SL}} </td>
                    <td>{{x.Operator}}</td>
                    <td>{{x.ClosingBase}}</td>
                    <td>{{x.percentage}}%</td>

                </tr>
                </tbody>
            </table>


        </div>

        <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="buddyAppChart">


        </div>

    </div>
    
    
<div class="row">
    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
        <h2 class="text-center" style="background-color: black; color: white">Clubz App Closing (%)</h2>

    </div>

    <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
        <br />
        <br />
        <br />
        <table class="table table-bordered">

            <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">operator</th>
                <th scope="col">Closing Base</th>
                <th scope="col">Percantage</th>

            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="x in clubzAppList">
                <td>{{x.SL}} </td>
                <td>{{x.Operator}}</td>
                <td>{{x.ClosingBase}}</td>
                <td>{{x.percentage}}%</td>

            </tr>
            </tbody>
        </table>


    </div>

    <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="clubzAppChart">


    </div>

</div>
    
<div class="row">
    <div class="col-md-12 col-lg-12 col-sm-12 col-xs-12">
        <h2 class="text-center" style="background-color: black; color: white">Shabox Closing (%)</h2>

    </div>

    <div class="col-md-4 col-lg-4 col-sm-4 col-xs-4">
        <br />
        <br />
        <br />
        <table class="table table-bordered">

            <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">operator</th>
                <th scope="col">Closing Base</th>
                <th scope="col">Percantage</th>

            </tr>
            </thead>
            <tbody>
            <tr ng-repeat="x in shaboxList">
                <td>{{x.SL}} </td>
                <td>{{x.Operator}}</td>
                <td>{{x.ClosingBase}}</td>
                <td>{{x.percentage}}%</td>

            </tr>
            </tbody>
        </table>


    </div>

    <div class="col-md-offset-2 col-lg-offset-2 col-sm-offset-2 col-md-6 col-lg-6 col-sm-6 col-xs-6" id="shaboxChart">


    </div>

</div>
</div>

</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/js/bootstrap-datepicker.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>
  
    <script>
        var raw = "http://wap.shabox.mobi/dashboard/api/";
       //  var raw = "../api/";
        var app = angular.module('myApp', []);
        app.controller('cntrl', function ($scope, $http, $timeout) {
            $scope.ss = false;           
            $scope.All = false;           
            $scope.sub = function () {
                $scope.ss = true;           
                $scope.All = false;  
                var data = {

                    FromDate: $scope.FromDate,
                    EndDate: $scope.EndDate
                }
                $scope.ss = true;     
                $http.post(raw +'ServiceRanking/GetBuddyOperatorWiseClosingData', data).then(function (response) {
                   $scope.buddyList = response.data;
                   PlotBuddyClosing(response.data);
                });

                
                $http.post(raw +'ServiceRanking/GetClubzOperatorWiseClosingData', data).then(function (response) {
                    $scope.clubzList = response.data;
                    PlotClubzClosing(response.data);
                });

                $http.post(raw +'ServiceRanking/GetBuddyOperatorWiseClosingDataApp', data).then(function (response) {
                    $scope.buddyAppList = response.data;
                    PlotBuddyAppClosing(response.data);
                });

                $http.post(raw +'ServiceRanking/GetClubzOperatorWiseClosingDataApp', data).then(function (response) {
                    $scope.clubzAppList = response.data;
                    PlotClubzAppClosing(response.data);
                });

                $http.post(raw +'ServiceRanking/GetShaboxOperatorWiseClosingDataApp', data).then(function (response) {
                    $scope.shaboxList = response.data;
                    PlotShaboxClosing(response.data);
                });

                $http.post(raw +'ServiceRanking/GetGameClubAndDigitalOperatorWiseClosing', data).then(function (response) {
                    $scope.gcList = response.data;
                    PlotGcClosing(response.data);
                });

                $timeout(function () {
                    $scope.ss = false;     
                    $scope.All = true; 
                }, 150);
                  
            };


        });

      
        function PlotBuddyClosing(data) {

            $('#churnchart').empty();
            $('#churnchart').append('<canvas id="churnchartmyChart" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartmyChart").getContext("2d");
           
            var data = {
                labels: 

                data.map(a => a.Operator)
                ,
                //labels: data.map(a => a.ServiceName),
                datasets: [
                    {
                        label: "Buddy Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }
                   
                ]
            };
            //var data = {
            //    labels: [
            //        "Red",
            //        "Green",
            //        "Yellow"
            //    ],
            //    datasets: [
            //        {
            //            data: [300, 50, 100],
            //            backgroundColor: [
            //                "#FF6384",
            //                "#36A2EB",
            //                "#FFCE56"
            //            ],
            //            hoverBackgroundColor: [
            //                "#FF6384",
            //                "#36A2EB",
            //                "#FFCE56"
            //            ]
            //        }]
            //};

            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'doughnut',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Shabox Buddy Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });




            //var myBarChart = null;
            //if ($('#churnchart').empty()) {
            //    $('#churnchart').append('<canvas id="churnchartmyChart" width="150" height="250" ></canvas>');
            //}

            //var ctx = document.getElementById("churnchartmyChart").getContext("2d");


            //ctx.height = 10;
            //// console.log(data.map(a => a.CommunicationSkills));
            
            //var data = {
            //    labels: 

            //        data.map(a => a.Operator)
            //    ,
            //    //labels: data.map(a => a.ServiceName),
            //    datasets: [
            //        {
                      
            //            data: data.map(a => a.percentage),
            //            backgroundColor: data.map(a => a.Color)
            //        }
                   
            //    ]
            //};
            //console.log(data);
            //myBarChart = new Chart(ctx,
            //   {
            //       type: 'pie',
            //       data: data,
            //       options: {
            //           tooltipEvents: [],
            //           tooltipCaretSize: 0,
            //           showTooltips: true,
            //           onAnimationComplete: function() {
            //               this.showTooltip(this.segments, true);
            //           }
            //       }
            //   });


        }

        function PlotClubzClosing(data) {

            $('#clubzchart').empty();
            $('#clubzchart').append('<canvas id="churnchartClubz" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartClubz").getContext("2d");
            var data = {
                labels:

                data.map(a => a.Operator) 
                ,
               
                datasets: [
                    {
                        label: "Clubz Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }

                ]
            };
            

            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Clubz Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });



        }

        function PlotBuddyAppClosing(data) {
            $('#buddyAppChart').empty();

            $('#buddyAppChart').append('<canvas id="churnchartBuddyApp" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartBuddyApp").getContext("2d");
            var data = {
                labels:

                data.map(a => a.Operator)
                ,

                datasets: [
                    {
                        label: "Buddy App Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }

                ]
            };


            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Buddy App Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });



        }

        function PlotClubzAppClosing(data) {
            $('#clubzAppChart').empty();

            $('#clubzAppChart').append('<canvas id="churnchartClubzApp" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartClubzApp").getContext("2d");
            var data = {
                labels:

                data.map(a => a.Operator)
                ,

                datasets: [
                    {
                        label: "Clubz App Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }

                ]
            };


            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Clubz App Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });



        }

        function PlotShaboxClosing(data) {
            $('#shaboxChart').empty();

            $('#shaboxChart').append('<canvas id="churnchartShabox" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartShabox").getContext("2d");
            var data = {
                labels:

                data.map(a => a.Operator)
                ,

                datasets: [
                    {
                        label: "Shabox Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }

                ]
            };


            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Shabox Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });



        }

        function PlotGcClosing(data) {

            $('#gcChart').empty();
            $('#gcChart').append('<canvas id="churnchartGc" width="100%" ></canvas>');

            var ctx = document.getElementById("churnchartGc").getContext("2d");
            var data = {
                labels:

                data.map(a => a.Operator)
                ,

                datasets: [
                    {
                        label: "Game/Digital Service",
                        data: data.map(a => a.percentage),
                        backgroundColor: data.map(a => a.Color)
                    }

                ]
            };


            Chart.pluginService.register({
                beforeRender: function (chart) {
                    if (chart.config.options.showAllTooltips) {
                        // create an array of tooltips
                        // we can't use the chart tooltip because there is only one tooltip per chart
                        chart.pluginTooltips = [];
                        chart.config.data.datasets.forEach(function (dataset, i) {
                            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                                chart.pluginTooltips.push(new Chart.Tooltip({
                                    _chart: chart.chart,
                                    _chartInstance: chart,
                                    _data: chart.data,
                                    _options: chart.options.tooltips,
                                    _active: [sector]
                                }, chart));
                            });
                        });

                        // turn off normal tooltips
                        chart.options.tooltips.enabled = false;
                    }
                },
                afterDraw: function (chart, easing) {
                    if (chart.config.options.showAllTooltips) {
                        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                        if (!chart.allTooltipsOnce) {
                            if (easing !== 1)
                                return;
                            chart.allTooltipsOnce = true;
                        }

                        // turn on tooltips
                        chart.options.tooltips.enabled = true;
                        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                            tooltip.initialize();
                            tooltip.update();
                            // we don't actually need this since we are not animating tooltips
                            tooltip.pivot();
                            tooltip.transition(easing).draw();
                        });
                        chart.options.tooltips.enabled = false;
                    }
                }
            })

            var myPieChart = new Chart(ctx, {
                type: 'pie',
                data: data,
                options: {
                    responsive: true,
                    legend: {
                        position: 'top'
                    },
                    showAllTooltips: true,
                    title: {
                        display: true,
                        text: 'Game/Digital Closing'
                    }, animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            });



        }


        
    </script>
}
